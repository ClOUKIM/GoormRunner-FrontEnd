name: 프론트엔드 CI/CD 파이프라인 🚀

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 브랜치 체크아웃 🧐
        uses: actions/checkout@v4

      - name: Node.js 설정 🌐
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 의존성 설치 🛠️
        run: npm install

      - name: 타입스크립트 빌드 🚧
        run: npm run build

      - name: 테스트 실행 🧪
        run: npm test

      - name: 빌드 아티팩트 목록 🗃️
        run: ls build

      - name: 빌드 아티팩트 ZIP 압축 📦
        run: |
          zip -r frontend.zip build appspec.yml scripts/
          ls -lh frontend.zip

      - name: AWS 자격 증명 구성 🔑
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'

      - name: S3에 업로드 🚀
        run: aws s3 cp frontend.zip s3://${{ secrets.FRONTEND_S3_BUCKET }}/${{ secrets.FRONTEND_S3_KEY }}

      - name: S3 업로드 확인 🧐
        run: |
          aws s3 ls s3://${{ secrets.FRONTEND_S3_BUCKET }}/${{ secrets.FRONTEND_S3_KEY }}
          if [ $? -ne 0 ]; then
            echo "S3 업로드 실패 또는 S3에 파일이 없음"
            exit 1
          else
            echo "S3 업로드 성공"
          fi

      - name: AWS CodeDeploy로 배포 🚀
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.FRONTEND_CODEDEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name ${{ secrets.FRONTEND_CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.FRONTEND_S3_BUCKET }},bundleType=zip,key=${{ secrets.FRONTEND_S3_KEY }}
